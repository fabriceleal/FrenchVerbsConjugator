#Wed Nov 30 21:44:28 GMT 2011
cmdhistory=["(doc doc)" "(find-doc \\"ver\\")" "(doc find-doc)" "(+ 2 2)" "(doc eq)" "(doc if)" "(if nil 'is-true, 'is-false)" "(if 'nil 'is-true, 'is-false)" "(if ()'is-true, 'is-false)" "(if '() 'is-true, 'is-false)" "(cdr ())" "(/ 1 0)" "(mapcar \#'(lambda (x) (+ x 1)) '(1 2 3))" "(map fn[x]('(x (+ x 1)) '(1 2 3\\n                            ) )" "(map fn[x]('(x (+ x 1)) '(1 2 3))" "(map fn[x]('(x (+ x 1)) [1 2 3]\\n                        )" "(map fn[x]([x (+ x 1)])\\n     [1 2 3])" "(map (fn[x]([x (+ x 1)])) [1 2 3])" "(map (fn[x]('(x (+ x 1))\\n             )) [1 2 3])" "(map (fn[x](+ x 1)\\r\\n                )) [1 2 3])" "(map (fn[x] (+ 1 1)) [1 2 3\\n                      ])" "(map (fn[x] (+ x 1)) [1 2 3])" "(map (fn[x] '(+ x 1)) [1 2 3])" "(map (fn[x] '(x (+ x 1)\\n                )) [1 2 3])" "(map (fn[x] '(x ,(+ x 1))) [1 2 3])" "(map (fn[x] list(x (+ x 1))) [1 2 3])" "(map (fn[x] (list(x (+ x 1)))) [1 2 3])" "(map (fn[x] (list(\\n                   (+ x 1)))) [1 2 3])" "(map (fn[x] (list('(+ x 1)))) [1 2 3])" "(map (fn[x] ((list x (+ x 1))) [1 2 3])" " (map (fn[x] (list x (+ x 1))) [1 2 3])" "(map (fn[x] ((list 1) (list 2)) [1 2 3])" "(map (fn[x] ((list 1 2)) [1 2 3])" "(map (fn[x] ((list 1 2))) [1 2 3])" "(def *persons-none*) '(\\r\\n\\t\\t'none))" "(def *persons-none* '(\\r\\n\\t\\t'none))" "(let theList '() (+ 1 theList))" "(first '(1 2 3 4))" "(rest '(1 2 3 4))" "(let theList '(1 2 3 4))" "(let (theList '(1 2 3 4)) ())" "(let [theList '(1 2 3 4)] ())" "(let [theList '(1 2 3 4)] (theList))" "(let [theList '(1 2 3 4)] ('theList))" "(mapcat (fn[x] (list x (+ x 1) (+ x 2))) (1 2 3))" "(mapcat (fn[x] (list x (+ x 1) (+ x 2))) '(1 2 3))" "(get *tenses-to-moods* \:present-tense)" "(get *mood-to-persons* \:indicative)" "(mapcat \\r\\n\\t\\t(fn [x] \\r\\n\\t\\t\\t(map (fn [y] (list 'y 'y)) '(1 2 3))) '(\:s-st \:s-nd \:s-rd \:p-st \:p-nd \:p-rd))" "\\t(mapcat \\r\\n\\t\\t(fn [x] \\r\\n\\t\\t\\t(map (fn [y] (list y y)) (get *persons-resolved* x))) " "(mapcat \\r\\n\\t\\t(fn [x] \\r\\n\\t\\t\\t(map (fn [y] (list y y)) (get *persons-resolved* x))) '(\:s-st \:s-nd \:s-rd \:p-st \:p-nd \:p-rd))" "(tense-to-persons 'present-simple)" "(tense-to-persons 'present-tense)" "(tense-to-persons \:present-tense)" "{'(1 2 3) '(1 2 3 4) }" "(get {(1 2 3) (1 2 3 4)} '(1 2 3))" "(get {'(1 2 3) '(1 2 3 4)} '(1 2 3))" "(fn [x] false)" "(apply (fn [x] false) 1)" "(apply (fn [x] (false)) 1)" "(apply '((fn [x] (false)) 1))" "(apply (fn [x] (false)) '(1))" "(apply (fn [x] ('false)) '(1))" "(apply (fn [x] ('false)) 1)" "(apply (fn [x] 'false) 1)" "(apply (fn [x] 'false) )" "(apply (fn [x] 'false) \\"qwe\\")" "(apply (fn [x] ('false)) \\"qwe\\")" "(apply (fn [x] ('false)) \:qwe)" "(apply 'first '(1 2 3))" "(apply 'first ('(1 2 3)))" " (apply 'first '('(1 2 3)))" " (apply 'first '((1 2 3)))" "(def *x* (fn[x] (+ 1 x)))" "(*x* 1)" "(def *teste* '(\\r\\n    ((fn [x] false) (fn [x] (+ x 1)))\\r\\n    ((fn [x] false) (fn [x] (+ x 2)))\\r\\n    ((fn [x] true) (fn [x] (+ x 3)))\\r\\n    ((fn [x] false) (fn [x] (+ x 4)))))" "(defn rule-list-predicate [rule] (first rule))" "(defn rule-list-transformer [rule] (first (rest rule)))" "(filter (fn [x] (rule-list-predicate x) item-list))\\n" "(filter (fn [x] (rule-list-predicate x)) *teste*)" "(filter (fn [x] (\=\= (rule-list-predicate x) true)) *teste*)" "(map (fn [x] (rule-list-predicate x)) *teste*)" "(map (fn [x] (apply (rule-list-predicate x) 1)) *teste*)" "(map (fn [x] (rule-list-predicate x) (x)) *teste*)" "(map (fn [x] ((rule-list-predicate x) 1)) *teste*)" "(map (fn [x] (rule-list-predicate x)) *teste*)" "(first (map (fn [x] (rule-list-predicate x)) *teste*))" "((first (map (fn [x] (rule-list-predicate x)) *teste*)) 0)" "(apply quote(first) ('(1 2 3)))" "(apply 'first ('(1 2 3)))" "(apply (fn[x](+ x 1)) '(1))" "(apply (fn[x y](+ x y)) '(1 2))" "\\n        (+ 11 1\\n         )" "(filter (fn[x] (rule-list-predicate x)) *teste*)" "(filter (fn[x] ~(rule-list-predicate x)) *teste*)" "'(\\r\\n    ((fn [x] false) (fn [x] (+ x 1)))\=" "'(\\r\\n    ((fn [x] false) (fn [x] (+ x 1))))" "'(\\r\\n    ~((fn [x] false) ~(fn [x] (+ x 1))))" "'(~((fn [x] false) ~(fn [x] (+ x 1))))" "`(~((fn [x] false) ~(fn [x] (+ x 1))))" "`((~(fn [x] false) ~(fn [x] (+ x 1))))" "*teste*" ";; Loading file src\\\\testeasd.clj" "*teste*" "(filter (fn [x] (rule-list-predicate x) item-list))\\n(+ 1 1)" "(filter (fn [x] (rule-list-predicate x) *teste*))" "(filter (fn [x] (rule-list-predicate x)) *teste*)" "(filter (fn [x] (apply (rule-list-predicate x) 1)) *teste*)" "(filter (fn [x] (apply (rule-list-predicate x) '(1))) *teste*)" ";; Loading file src\\\\testeasd.clj" "(evaluate-rules '((1 2) *verbs*)" "(evaluate-rules '(1 2) *verbs*)" "(evaluate-rules '((1 2)) *verbs*)" "(map \\r\\n    (fn[x] x *verbs*)) \\r\\n    evaluate-rules)" "(map \\r\\n       (fn[x] x *verbs*)) \\r\\n       '((1 2))" "(map (fn[x] x) '((1 2))" "(map (fn[x] x) '((1 2)))" " (map \\r\\n    (fn[x] (locate-and-evaluate x x rules)) \\r\\n    input-list)" "(map \\r\\n       (fn[x] (locate-and-evaluate x x *verbs*)) \\r\\n       '((1 2))" "(map \\r\\n          (fn[x] (locate-and-evaluate x x *verbs*)) \\r\\n          '((1 2)))" ";; Loading file src\\\\testeasd.clj" "(evaluate-rules '((1 2)) *verbs*)" "(\= \:LEAL \:LEAL)" "(\=\= \:LEAL \:LEAL)" ";; Loading file src\\\\testeasd.clj" "(\\"teste\\")" "'(\\"teste\\")" "(.substring \\"teste\\" 0 2)" "(let ((len-m1 (- (.length \\"teste\\") 1))) (.substring \\"teste\\" (- len-m1 2) len-m1))" "(let [(len-m1 (- (.length \\"teste\\") 1))] (.substring \\"teste\\" (- len-m1 2) len-m1))" "(let [len-m1 (- (.length \\"teste\\") 1)] (.substring \\"teste\\" (- len-m1 2) len-m1))" "(let [len-m1 (.length \\"teste\\")] (.substring \\"teste\\" (- len-m1 1) len-m1))" "(let [len-m1 (.length \\"teste\\")] (.substring \\"teste\\" (- len-m1 2) len-m1))" "(let [theStr \\"teste\\" len-m1 (.length theStr)] (.substring theStr (- len-m1 2) len-m1))" "(let [theStr \\"aller\\" len-m1 (.length theStr)] (.substring theStr (- len-m1 2) len-m1))" "(let [theStr \\"demander\\" len-m1 (.length theStr)] (.substring theStr (- len-m1 2) len-m1))" "(let [theStr \\"demander\\" len-m1 (.length theStr)] '(.substring theStr (- len-m1 2) len-m1))" "(let [theStr \\"demander\\" len-m1 (.length theStr)] `(~(.substring theStr (- len-m1 2) len-m1)))" "(let [theStr \\"demander\\" len-m1 (.length theStr)] `(~(.substring theStr 0 (- len-m1 2))) ~(.substring theStr (- len-m1 2) len-m1) theStr))" "(defn verb-parts-extract [verb]\\r\\n  (let \\r\\n    [len (.length verb)]    \\r\\n\\t`(verb \\r\\n    ~(.substring verb (- len 2) len) \\r\\n    verb))" ";; Loading file src\\\\testeasd.clj" "(verb-parts-extract \\"demander\\")" ";; Loading file src\\\\testeasd.clj" "(verb-parts-extract \\"demander\\")" ";; Loading file src\\\\testeasd.clj" "(verb-parts-extract \\"demander\\")" "(list (list 1 2 3) (list 1 2 3))" "(list ~(1 2 3) ~(1 2 3))" "(list ~(list 1 2 3) ~(list 1 2 3))" "(merge '(1 2 3) '(4 5 6))" "(merge '(1 2 3) 4 5 6)" "(merge '(1 2 3) '(4 5 6) '())" "(merge '() '(1 2 3) '(4 5 6) '())" "(merge '(1 2 3) (merge '(4 5 6)))" "(concat '(1 2 3) '(4 5 6))" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" "(verb-parts-extract \\"demander\\"" "(verb-parts-extract \\"demander\\")" "(get *tense-to-rules* \:present-tense)" "(map (fn[x] (concat '(1 2 3) x)) (tense-to-persons \:present-tense))" ";; Loading file src\\\\testeasd.clj" "(+ 1 1)" "(regular-rule \\"demander\\" \:present-tense)" "(def *verb* \\"demander\\")" "(def verb \\"demander\\")" "(def y (verb-parts-extract verb))" "y" "(def rules (get *tense-to-rules* tense))" "rules" "(def tense \:present-tense)" "(+ 1 1)" "(def rules (get *tense-to-rules* tense))" "(def list-items (map (fn[x] (concat y x)) (tense-to-persons tense)))" "list-items" "(rule-for-item-list '((\\"demand\\" \\"er\\" \\"demander\\" \:je \:s-st)) rules)" "(rule-for-item-list '(\\"demand\\" \\"er\\" \\"demander\\" \:je \:s-st) rules)" "(def par-pred '(\\"demand\\" \\"er\\" \\"demander\\" \:je \:s-st))" "(def par-transf par-pred)" "(apply (rule-list-transformer (rule-for-item-list par-pred rules)) par-transf)" "(+ 1 1)" "rules" "par-pref" "par-pred" "rule-for-item-list" "(def par-predicate par-pred)" "(filter (fn [x] (apply (rule-list-predicate x) par-predicate)) rules)" "rules" "par-predicate" "(map (fn [x] (apply (rule-list-predicate x) par-predicate)) rules)" "(+ 1 1 )" "*rules-present-tense*" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" "(regular-rule \\"demander\\" \:present-tense)\\n(+ 1 1)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)\\n(+ 1 1)" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)\\n\\n(+ 1 1)" "(concat \\"demand\\" \\"e\\")" "(.concat \\"demand\\" \\"e\\")" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)\\n(+ 1 1)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)\\n(+ 1 1)" "(def *endings-present* {\\r\\n   \:s-st \\"e\\"})" "(def *endings-present* {\\r\\n   \:s-st \\"e\\"\\r\\n   \:s-nd \\"es\\"\\r\\n   \:s-rd \\"e\\"\\r\\n   \:p-st \\"ons\\"\\r\\n   \:p-nd \\"ez\\"\\r\\n   \:p-rd \\"ent\\"})" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" "(concat '(1 2) '(tense) '(3 4))" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" "(print '(1 2 3))" ";; Loading file src\\\\testeasd.clj" "(regular-verb \\"demander\\" \:presente-tense)" "(regular-verb \\"demander\\" \:present-tense)" "(regular-rule \\"demander\\" \:present-tense)" "(regular-rule \\"demander\\" \:presente-tense)" "(regular-rule \\"demander\\" \:manolo-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"demander\\" \:present-tense)" "(set verb \\"demander\\")" "(def verb \\"demander\\")" "(def tense \:present-tense)" "'((verb tense))" "~((`verb `tense))" "`((~verb ~tense))" "('(verb tense))" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"demander\\" \:present-tense)" "(regular-rule \\"demander\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"demander\\" \:present-tense)" "(regular-rule \\"demander\\" \:present-tense)" "(.concat \\"teste\\" \\"qwe\\" \\"qweqwe\\")" "(.concat \\"teste\\" \\"qwe\\")" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"entendre\\" \:present-tense)" "(first (fn[x](\= x 1)) '(1 2 3))" "(contains? '(1 2 3) 1)" "(contains? '(1 2 3) 0)" "(some (fn[x] (\= x \\"te\\")) '(\\"te\\" \\"as\\" \\"wqe\\") )" "(some (fn[x] (\= x \\"tew\\")) '(\\"te\\" \\"as\\" \\"wqe\\") )" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"rendre\\" \:present-tense)" "(conjugate-verb \\"rompre\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"rendre\\" \:present-tense)" "(conjugate-verb \\"rompre\\" \:present-tense)" ";; Loading file src\\\\testeasd.clj" "(conjugate-verb \\"donner\\" \:present-tense)" ";; Loading file src\\\\main.clj" "(doc use)" "(use present)" "(use \:present)" ";; Loading file src\\\\main.clj" ";; Loading file src\\\\conjugator\\\\main.clj" "(def evalute-rules rules/evaluate-rules)" "(doc ns)" ";; Loading file src\\\\conjugator\\\\main.clj" "(conjugate-verb \\"donner\\" \:present-tense)" "'((\\"conduire\\") \:present-simple)" "(first (rest (rest '(1 2 3 4 5 6))))" "(second '(1 2 3) )" "(defn is-irregular[verb tense] \\r\\n  false)" "(is-irregular 1 2)" ";; Loading file src\\\\conjugator\\\\main.clj" ";; Loading file src\\\\conjugator\\\\rulesengine.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\main.clj" ";; Loading file src\\\\conjugator\\\\irregulars.clj" ";; Loading file src\\\\conjugator\\\\main.clj" "(defn teste[x] ~x)" "(teste '(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(defn teste[x] ~(x))" "(teste '(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(teste `(map (fn[x] (+ x 4) ) '(1 2 3 4)))" " (defn teste[x] (x))" "(teste `(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(teste '(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(apply list(apply '(map (fn[x] (+ x 4) ) '(1 2 3 4))))" "(apply list('apply '(map (fn[x] (+ x 4) ) '(1 2 3 4))))" "(apply 'apply '(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(apply `apply '(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(apply apply '(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(apply apply unquote(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(apply '(map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(apply (list map (fn[x] (+ x 4) ) '(1 2 3 4)))" "(apply map (fn[x] (+ x 4) ) '(1 2 3 4)))" "\=> (apply map '((fn[x] (+ x 4) ) '(1 2 3 4))))" "(apply map '((fn[x] (+ x 4) ) (1 2 3 4))))" "(first '(1 2 3))" "(first (list 1 2 3))" "(defn special-first[list-or-functor] (first list-or-functor))" "(defn funky\\n  (print \\"called\\")\\n  (list 1 2 3 4 5  6 7 ))" "(defn funky []\\r\\n     (print \\"called\\")\\r\\n     (list 1 2 3 4 5  6 7 ))" "(funky)" "(special-first funky)" "(special-first (funky))" " (defn special-first[list-or-functor](print \\"begin\\") (first list-or-functor) (print \\"end\\"))" "(special-first (funky))" "(special-first '(funky))" "(defn special-first[list-or-functor](print \\"begin\\") (first list-or-functor) )" "(special-first funky)" "(special-first 'funky)" "(special-first '(funky))" "(special-first (funky))" "(special-first ((funky)))" "(special-first '((funky)))" "(doc lazy-seq)" "(special-first (lazy-seq funky))" "(special-first (lazy-seq (funky)))" "(special-first funky)" "(special-first (funky))" "(doc lazy-)" ";; Loading file src\\\\conjugator\\\\main.clj" "(conjugate-verb \\"donner\\" \:present-tense)" "(conjugator.main/conjugate-verb \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\irregulars.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\main.clj" "(concatenator \\"donner\\" '() '((\:je \:s-st)) '())" "(conjugator.grammar-rules/concatenator \\"donner\\" '() '((\:je \:s-st)) '())" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/concatenator \\"donner\\" '() '((\:je \:s-st)) '())" "(if true true nil)" "(if false true nil)" ";; Loading file src\\\\conjugator\\\\present.clj" "(get nil \:a)" "(get {\:b \:teste} \:a)" "(get {} \:a)" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\main.clj" "(conjugate-verb \\"donner\\" \:present-tense)" "(conjugator.main/conjugate-verb \\"donner\\" \:present-tense)" "(tense-to-persons \:present-tense)" "(conjugator.grammar-rules/tense-to-persons \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\main.clj" "(conjugator.main/conjugate-verb \\"donner\\" \:present-tense)" "(conjugator.grammar-rules/verb-parts-extract \\"donner\\")" "(concat(conjugator.grammar-rules/verb-parts-extract \\"donner\\")y (list \:present-tense) (list (tense-to-persons \:present-tense)))" "(concat(conjugator.grammar-rules/verb-parts-extract \\"donner\\") (list \:present-tense) (list (tense-to-persons \:present-tense)))" "(concat(conjugator.grammar-rules/verb-parts-extract \\"donner\\")y (list \:present-tense) (list (conjugator.grammar-rules/tense-to-persons \:present-tense)))" "(concat(conjugator.grammar-rules/verb-parts-extract \\"donner\\") (list \:present-tense) (list (conjugator.grammar-rules/tense-to-persons \:present-tense)))" "(conjugator.main/conjugate-verb \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\main.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\rulesengine.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\main.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\rulesengine.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\rulesengine.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" "(get conjugator.grammar-rules/*tense-to-rules* \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" "(map (fn [x] (print x)) {\:a \\"a\\" \:b \\"b\\"})" "(map (fn [x] (print (first x))) {\:a \\"a\\" \:b \\"b\\"})" "(apply sorted-map '(\:A \\"a\\" \:b \\"\:b\\"))" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/endings-resolved conjugator.grammar-rules/*endings-present-er*)" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" "(conjugator.grammar-rules/regular-rule \\"donner\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\irregulars.clj" ";; Loading file src\\\\conjugator\\\\present.clj" ";; Loading file src\\\\conjugator\\\\irregulars.clj" "(.substring \\"teste\\" 0 2)" "(.substring \\"teste\\" 0 (- (.length \\"teste\\") 2))" "(def *test* '((\\"dire\\") (\:present-tense)))" "(\= *test* '((\\"dire\\") (\:present-tense)))" "'(verb tense)" "(\= '(verb tense) (list \:verb \:tense))" " (\= '(verb tense) (list 'verb 'tense))" ";; Loading file src\\\\conjugator\\\\irregulars.clj" "(is-irregular \\"aller\\" \:present-tense)" "(conjugator.irregulars/is-irregular \\"aller\\" \:present-tense)" "(doc find)" "(doc filter)" ";; Loading file src\\\\conjugator\\\\irregulars.clj" "(conjugator.irregulars/is-irregular \\"aller\\" \:present-tense)" "(conjugator.irregulars/is-irregular \\"dontfindmer\\" \:present-tense)" "(list (list \\"aller\\") (list \:present-tense))" "(doc not)" ";; Loading file src\\\\conjugator\\\\irregulars.clj" "(conjugator.irregulars/is-irregular \\"aller\\" \:present-tense)" " (conjugator.irregulars/is-irregular \\"aasdsdller\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\irregulars.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\irregulars.clj" "(conjugator.irregulars/is-irregular \\"aller\\" \:present-tense)" "(conjugator.irregulars/is-irregular \\"aasdsdller\\" \:present-tense)" "(get-irregular-conjugation \\"aller\\" \:present-tense)" "(conjugator.irregulars/get-irregular-conjugation \\"aller\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\main.clj" "(conjugate-verb \\"donner\\" \:present-tense)" "(conjugator.main/conjugate-verb \\"donner\\" \:present-tense)" "(conjugator.main/conjugate-verb \\"aller\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\irregulars.clj" ";; Loading file src\\\\conjugator\\\\main.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\rulesengine.clj" ";; Loading file src\\\\conjugator\\\\grammar_rules.clj" ";; Loading file src\\\\conjugator\\\\main.clj" ";; Loading file src\\\\conjugator\\\\irregulars.clj" ";; Loading file src\\\\conjugator\\\\main.clj" "(conjugator.main/conjugate-verb \\"aller\\" \:present-tense)" ";; Loading file src\\\\conjugator\\\\irregulars.clj" ";; Loading file src\\\\conjugator\\\\main.clj" "(conjugator.main/conjugate-verb \\"aller\\" \:present-tense)"]
eclipse.preferences.version=1
